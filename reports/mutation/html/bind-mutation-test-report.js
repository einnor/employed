document.querySelector('mutation-test-report-app').report = {"files":{"/Users/ronnie/Workspace/employed/controllers/employee.controller.js":{"language":"javascript","mutants":[{"id":"1","location":{"end":{"column":32,"line":2},"start":{"column":21,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"0","location":{"end":{"column":57,"line":1},"start":{"column":31,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":32,"line":3},"start":{"column":24,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":35,"line":4},"start":{"column":21,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":2,"line":14},"start":{"column":27,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"5","location":{"end":{"column":2,"line":38},"start":{"column":50,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":4,"line":34},"start":{"column":7,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"7","location":{"end":{"column":23,"line":19},"start":{"column":9,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"8","location":{"end":{"column":23,"line":19},"start":{"column":9,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"9","location":{"end":{"column":6,"line":21},"start":{"column":25,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"10","location":{"end":{"column":6,"line":24},"start":{"column":53,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"11","location":{"end":{"column":20,"line":25},"start":{"column":9,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"12","location":{"end":{"column":20,"line":25},"start":{"column":9,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"13","location":{"end":{"column":6,"line":27},"start":{"column":22,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"14","location":{"end":{"column":91,"line":26},"start":{"column":35,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"15","location":{"end":{"column":4,"line":37},"start":{"column":19,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":2,"line":51},"start":{"column":51,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":4,"line":48},"start":{"column":7,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"18","location":{"end":{"column":38,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"19","location":{"end":{"column":38,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"20","location":{"end":{"column":38,"line":43},"start":{"column":9,"line":43}},"mutatorName":"LogicalOperator","replacement":"employees || employees.length","status":"Killed"},{"id":"21","location":{"end":{"column":6,"line":45},"start":{"column":40,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":6,"line":47},"start":{"column":12,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"23","location":{"end":{"column":4,"line":50},"start":{"column":19,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"24","location":{"end":{"column":2,"line":64},"start":{"column":51,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":4,"line":61},"start":{"column":7,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"26","location":{"end":{"column":17,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"27","location":{"end":{"column":17,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"28","location":{"end":{"column":6,"line":58},"start":{"column":19,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"29","location":{"end":{"column":6,"line":60},"start":{"column":12,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"30","location":{"end":{"column":4,"line":63},"start":{"column":19,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"31","location":{"end":{"column":2,"line":84},"start":{"column":54,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"32","location":{"end":{"column":4,"line":80},"start":{"column":7,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"33","location":{"end":{"column":8,"line":73},"start":{"column":7,"line":71}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":32,"line":72},"start":{"column":27,"line":72}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"35","location":{"end":{"column":17,"line":75},"start":{"column":9,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"36","location":{"end":{"column":17,"line":75},"start":{"column":9,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"37","location":{"end":{"column":6,"line":77},"start":{"column":19,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"38","location":{"end":{"column":6,"line":79},"start":{"column":12,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"39","location":{"end":{"column":4,"line":83},"start":{"column":19,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":2,"line":97},"start":{"column":54,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"41","location":{"end":{"column":4,"line":94},"start":{"column":7,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"42","location":{"end":{"column":16,"line":89},"start":{"column":9,"line":89}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"43","location":{"end":{"column":16,"line":89},"start":{"column":9,"line":89}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"44","location":{"end":{"column":6,"line":91},"start":{"column":18,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"45","location":{"end":{"column":6,"line":93},"start":{"column":12,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"46","location":{"end":{"column":44,"line":92},"start":{"column":28,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"47","location":{"end":{"column":4,"line":96},"start":{"column":19,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"48","location":{"end":{"column":2,"line":124},"start":{"column":49,"line":99}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"49","location":{"end":{"column":4,"line":121},"start":{"column":7,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"50","location":{"end":{"column":23,"line":102},"start":{"column":9,"line":102}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"51","location":{"end":{"column":23,"line":102},"start":{"column":9,"line":102}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"52","location":{"end":{"column":6,"line":104},"start":{"column":25,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"53","location":{"end":{"column":6,"line":107},"start":{"column":50,"line":105}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"54","location":{"end":{"column":18,"line":108},"start":{"column":9,"line":108}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"55","location":{"end":{"column":18,"line":108},"start":{"column":9,"line":108}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"56","location":{"end":{"column":18,"line":108},"start":{"column":9,"line":108}},"mutatorName":"BooleanLiteral","replacement":"employee","status":"Killed"},{"id":"57","location":{"end":{"column":6,"line":110},"start":{"column":20,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"58","location":{"end":{"column":91,"line":109},"start":{"column":35,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"59","location":{"end":{"column":23,"line":113},"start":{"column":9,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"60","location":{"end":{"column":23,"line":113},"start":{"column":9,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"61","location":{"end":{"column":23,"line":113},"start":{"column":9,"line":113}},"mutatorName":"BooleanLiteral","replacement":"validPassword","status":"Killed"},{"id":"62","location":{"end":{"column":6,"line":115},"start":{"column":25,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"63","location":{"end":{"column":87,"line":114},"start":{"column":35,"line":114}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"64","location":{"end":{"column":6,"line":118},"start":{"column":34,"line":116}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"66","location":{"end":{"column":49,"line":118},"start":{"column":45,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"65","location":{"end":{"column":51,"line":118},"start":{"column":32,"line":118}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"67","location":{"end":{"column":28,"line":119},"start":{"column":16,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"68","location":{"end":{"column":4,"line":123},"start":{"column":19,"line":121}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"69","location":{"end":{"column":2,"line":133},"start":{"column":18,"line":126}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"const employeeModel = require('../models/employee.model');\nconst joi = require('@hapi/joi');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\nconst SALT_ROUNDS = 10;\n\nconst schema = joi.object({\n  name: joi.string().required(),\n  email: joi.string().required().email(),\n  password: joi.string().min(6).required(),\n  gender: joi.string(),\n  phone: joi.string(),\n});\n\nconst createEmployee = async (req, res, next) => {\n  try {\n    const joiCheck = schema.validate(req.body);\n    if (joiCheck.error) {\n      return res.status(400).json(joiCheck.error);\n    }\n    const emailExists = await employeeModel.findOne({\n      email: req.body.email,\n    });\n    if (emailExists) {\n      return res.status(400).json('The email you provided already exists in our database.');\n    }\n\n    const salt = await bcrypt.genSalt(SALT_ROUNDS);\n    const encryptedPassword = await bcrypt.hash(req.body.password, salt);\n    req.body.password = encryptedPassword;\n    const employee = await employeeModel.create(req.body);\n    res.status(201).json(employee);\n  } catch (error) {\n    console.log(error);\n    res.status(500).json(error)\n  }\n};\n\nconst getAllEmployees = async (req, res, next) => {\n  try {\n    const employees = await employeeModel.find({});\n    if (employees && employees.length) {\n      res.status(200).json(employees);\n    } else {\n      res.status(404).json();\n    }\n  } catch (error) {\n    res.status(500).json(error);\n  }\n};\n\nconst getEmployeeById = async (req, res, next) => {\n  try {\n    const employee = await employeeModel.findById(req.params.id);\n    if (employee) {\n      res.status(200).json(employee);\n    } else {\n      res.status(404).json();\n    }\n  } catch (error) {\n    res.status(500).json(error);\n  }\n};\n\nconst updateEmployeeById = async (req, res, next) => {\n  try {\n    const employee = await employeeModel.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      {\n        useFindAndModify: false,\n      },\n    );\n    if (employee) {\n      res.status(201).json(employee);\n    } else {\n      res.status(400).json({});\n    }\n  } catch (error) {\n    // console.log(error);\n    res.status(500).json(error);\n  }\n};\n\nconst deleteEmployeeById = async (req, res, next) => {\n  try {\n    const results = await employeeModel.findByIdAndDelete(req.params.id);\n    if (results) {\n      res.status(200).json(results);\n    } else {\n      res.status(404).json('User Not Found');\n    }\n  } catch (error) {\n    res.status(500).json(error);\n  }\n};\n\nconst loginEmployee = async (req, res, next) => {\n  try {\n    const joiCheck = schema.validate(req.body);\n    if (joiCheck.error) {\n      return res.status(400).json(joiCheck.error);\n    }\n    const employee = await employeeModel.findOne({\n      email: req.body.email,\n    });\n    if (!employee) {\n      return res.status(400).json('The email you provided does not exist in our database.');\n    }\n    \n    const validPassword = await bcrypt.compare(req.body.password, employee.password);\n    if (!validPassword) {\n      return res.status(400).json('You provided an invalid password.Please try again.');\n    }\n    const token = await jwt.sign({\n      data: employee,\n    }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.header('auth-token', token);\n    res.status(201).json(employee);\n  } catch (error) {\n    res.status(500).json(error);\n  }\n};\n\nmodule.exports = {\n  createEmployee,\n  getAllEmployees,\n  getEmployeeById,\n  updateEmployeeById,\n  deleteEmployeeById,\n  loginEmployee,\n};\n"}},"schemaVersion":"1.0","thresholds":{"high":95,"low":85,"break":56}};